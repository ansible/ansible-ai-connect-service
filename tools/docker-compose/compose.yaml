version: "3.8"
services:
  django:
    user: "1000"
    platform: linux/amd64
    image: localhost/docker-compose_django:latest
    build:
      context: $PWD
      dockerfile: wisdom-service.Containerfile
    depends_on:
      - db
    volumes:
      - $PWD/ansible_wisdom:/var/www/ansible-wisdom-service/ansible_wisdom
      - $PWD/ari/kb:/etc/ari/kb
      - $PWD/tools/scripts:/etc/wisdom/scripts
    ports:
      - "8000:8000"
    expose:
      - "8000"
      - "8001-8011" # django-prometheus
    environment:
      - DJANGO_SETTINGS_MODULE=ansible_wisdom.main.settings.development
      - DJANGO_LOG_LEVEL=${DJANGO_LOG_LEVEL}
      - ANSIBLE_AI_DATABASE_NAME=wisdom
      - ANSIBLE_AI_DATABASE_USER=wisdom
      - ANSIBLE_AI_DATABASE_PASSWORD=wisdom
      - ANSIBLE_AI_DATABASE_HOST=db
      - ANSIBLE_HOME=/etc/ansible
      - ENABLE_ARI_POSTPROCESS=${ENABLE_ARI_POSTPROCESS}
      - ENABLE_ANSIBLE_LINT_POSTPROCESS=${ENABLE_ANSIBLE_LINT_POSTPROCESS}
      - ANSIBLE_LINT_TRANSFORM_RULES=${ANSIBLE_LINT_TRANSFORM_RULES}
      - ARI_KB_PATH=/etc/ari/kb
      - DEBUG_VALUE=${DEBUG_VALUE}
      - SOCIAL_AUTH_GITHUB_KEY=${SOCIAL_AUTH_GITHUB_KEY}
      - SOCIAL_AUTH_GITHUB_SECRET=${SOCIAL_AUTH_GITHUB_SECRET}
      - SOCIAL_AUTH_GITHUB_TEAM_KEY=${SOCIAL_AUTH_GITHUB_TEAM_KEY}
      - SOCIAL_AUTH_GITHUB_TEAM_SECRET=${SOCIAL_AUTH_GITHUB_TEAM_SECRET}
      - SECRET_KEY=${SECRET_KEY:-somesecret}
      - SEGMENT_WRITE_KEY=${SEGMENT_WRITE_KEY}
      - SEGMENT_ANALYTICS_WRITE_KEY=${SEGMENT_ANALYTICS_WRITE_KEY}
      - HUGGINGFACE_HUB_CACHE=/var/www/model-cache
      - SENTENCE_TRANSFORMERS_HOME=/var/www/model-cache
      - ANSIBLE_AI_SEARCH_HOST=${ANSIBLE_AI_SEARCH_HOST}
      - ANSIBLE_AI_SEARCH_PORT=${ANSIBLE_AI_SEARCH_PORT}
      - ANSIBLE_AI_SEARCH_KEY=${ANSIBLE_AI_SEARCH_KEY}
      - ANSIBLE_AI_SEARCH_SECRET=${ANSIBLE_AI_SEARCH_SECRET}
      - ANSIBLE_AI_SEARCH_REGION=${ANSIBLE_AI_SEARCH_REGION}
      - ANSIBLE_AI_MODEL_MESH_HOST=${ANSIBLE_AI_MODEL_MESH_HOST}
      - ANSIBLE_AI_MODEL_MESH_INFERENCE_PORT=${ANSIBLE_AI_MODEL_MESH_INFERENCE_PORT}
      - ANSIBLE_AI_MODEL_MESH_API_TYPE=${ANSIBLE_AI_MODEL_MESH_API_TYPE}
      - ANSIBLE_AI_MODEL_MESH_API_TIMEOUT=${ANSIBLE_AI_MODEL_MESH_API_TIMEOUT:-120}
      - ANSIBLE_AI_MODEL_NAME=${ANSIBLE_AI_MODEL_NAME}
      - ANSIBLE_AI_MODEL_MESH_API_KEY=${ANSIBLE_AI_MODEL_MESH_API_KEY}
      - COMPLETION_USER_RATE_THROTTLE=${COMPLETION_USER_RATE_THROTTLE}
      - SOCIAL_AUTH_OIDC_OIDC_ENDPOINT=${SOCIAL_AUTH_OIDC_OIDC_ENDPOINT}
      - SOCIAL_AUTH_OIDC_KEY=${SOCIAL_AUTH_OIDC_KEY}
      - SOCIAL_AUTH_OIDC_SECRET=${SOCIAL_AUTH_OIDC_SECRET}
      - AUTHZ_BACKEND_TYPE=${AUTHZ_BACKEND_TYPE}
      - AUTHZ_DUMMY_USERS_WITH_SEAT=${AUTHZ_DUMMY_USERS_WITH_SEAT}
      - AUTHZ_DUMMY_RH_ORG_ADMINS=${AUTHZ_DUMMY_RH_ORG_ADMINS}
      - AUTHZ_DUMMY_ORGS_WITH_SUBSCRIPTION=${AUTHZ_DUMMY_ORGS_WITH_SUBSCRIPTION}
      - AUTHZ_SSO_CLIENT_ID=${AUTHZ_SSO_CLIENT_ID}
      - AUTHZ_SSO_CLIENT_SECRET=${AUTHZ_SSO_CLIENT_SECRET}
      - AUTHZ_SSO_SERVER=${AUTHZ_SSO_SERVER}
      - AUTHZ_API_SERVER=${AUTHZ_API_SERVER}
      - WCA_CLIENT_BACKEND_TYPE=${WCA_CLIENT_BACKEND_TYPE}
      - WCA_SECRET_MANAGER_ACCESS_KEY=${WCA_SECRET_MANAGER_ACCESS_KEY}
      - WCA_SECRET_MANAGER_KMS_KEY_ID=${WCA_SECRET_MANAGER_KMS_KEY_ID}
      - WCA_SECRET_MANAGER_PRIMARY_REGION=${WCA_SECRET_MANAGER_PRIMARY_REGION}
      - WCA_SECRET_MANAGER_REPLICA_REGIONS=${WCA_SECRET_MANAGER_REPLICA_REGIONS}
      - WCA_SECRET_MANAGER_SECRET_ACCESS_KEY=${WCA_SECRET_MANAGER_SECRET_ACCESS_KEY}
      - WCA_SECRET_BACKEND_TYPE=${WCA_SECRET_BACKEND_TYPE}
      - WCA_SECRET_DUMMY_SECRETS=${WCA_SECRET_DUMMY_SECRETS}
      - ANSIBLE_WCA_INFERENCE_URL=${ANSIBLE_WCA_INFERENCE_URL}
      - ANSIBLE_WCA_HEALTHCHECK_API_KEY=${ANSIBLE_WCA_HEALTHCHECK_API_KEY}
      - ANSIBLE_WCA_HEALTHCHECK_MODEL_ID=${ANSIBLE_WCA_HEALTHCHECK_MODEL_ID}
      - DEPLOYMENT_MODE=${DEPLOYMENT_MODE}
    command:
      - /etc/wisdom/scripts/launch-wisdom-compose.sh
    networks:
      - dbnet
  db:
    platform: linux/amd64
    image: docker.io/library/postgres:15-alpine
    environment:
      - POSTGRES_PASSWORD=wisdom
      - POSTGRES_DB=wisdom
      - POSTGRES_USER=wisdom
    networks:
      - dbnet
# Disabled because this doesn't work properly on MacOS.
# [33] CONTEXT:  writing block 0 of relation base/16384/2658
# 2023-01-17 21:46:56.579 UTC [33] LOG:  out of file descriptors: No file descriptors available; release and retry
#    volumes:
#      - $PWD/db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
  prometheus:
    platform: linux/amd64
    image: docker.io/prom/prometheus
    command:
      - --config.file=/opt/prometheus/prometheus.yaml
      - --web.enable-lifecycle
    volumes:
      - $PWD/prometheus/:/opt/prometheus/
    ports:
      - "9090:9090"
    networks:
      - dbnet
  grafana:
    platform: linux/amd64
    image: docker.io/grafana/grafana:7.5.17
    environment:
      - GF_LOG_LEVEL=warn
    ports:
      - "13000:3000"
    volumes:
      - $PWD/grafana:/var/lib/grafana
    networks:
      - dbnet

networks:
  dbnet:
