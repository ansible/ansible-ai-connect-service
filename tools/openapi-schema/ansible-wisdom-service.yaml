openapi: 3.0.3
info:
  title: Ansible Wisdom Service
  version: 0.0.5
  description: Equip the automation developer with Wisdom super powers.
paths:
  /api/ai/completions/:
    post:
      operationId: ai_completions_create
      description: Returns inline code suggestions based on a given Ansible editor
        context.
      summary: Inline code suggestions
      tags:
      - ai
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionRequest'
            examples:
              ValidExample:
                value:
                  prompt: |
                    ---
                    - hosts: all
                      become: yes

                      tasks:
                      - name: Install ssh
                summary: Request Sample
                description: A valid sample request.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CompletionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CompletionRequest'
        required: true
      security:
      - oauth2:
        - read
        - write
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletionResponse'
              examples:
                ValidExample:
                  value:
                    predictions:
                    - |2-
                          ansible.builtin.package:
                            name: openssh-server
                            state: present
                  summary: Response sample
                  description: A valid sample response.
          description: ''
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '429':
          description: Request was throttled
        '503':
          description: Service Unavailable
  /api/ai/feedback/:
    post:
      operationId: ai_feedback_create
      description: Feedback API for the AI service
      summary: Feedback API for the AI service
      tags:
      - ai
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackRequest'
            examples:
              ValidInlineSuggestionFeedbackExample:
                value:
                  inlineSuggestion:
                    latency: 1000
                    userActionTime: 5155
                    action: '0'
                    suggestionId: a1b2c3d4-e5f6-a7b8-c9d0-e1f2a3b4c5d6
                summary: Feedback Request sample for inline suggestion to identify
                  if the suggestion is accepted or ignored.
                description: A valid inline suggestion feedback sample request to
                  get details about the suggestion like latency time, user decision
                  time, user action and suggestion id.
              ValidAnsibleContentFeedbackExample:
                value:
                  ansibleContent:
                    content: |
                      ---
                      - hosts: all
                        become: yes

                        tasks:
                        - name: Install ssh
                    documentUri: file:///home/user/ansible/test.yaml
                    trigger: '0'
                summary: Feedback Request sample for Ansible content upload
                description: A valid sample request to get ansible content as feedback.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FeedbackRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FeedbackRequest'
      security:
      - oauth2:
        - read
        - write
      - cookieAuth: []
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /api/me/:
    get:
      operationId: me_retrieve
      tags:
      - me
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /check/:
    get:
      operationId: check_retrieve
      description: Wisdom Service Liveness Probe View
      summary: Liveness probe
      tags:
      - check
      security:
      - {}
      responses:
        '200':
          description: OK
  /check/status/:
    get:
      operationId: check_status_retrieve
      description: Wisdom Service Health Check
      summary: Health check with backend server status
      tags:
      - check
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ExampleOutput:
                  value:
                    status: ok
                    timestamp: '2023-03-13T17:25:17.240683'
                    version: latest 0.1.202303131417
                    git_commit: b987bc43b90f8aca2deaf3bda85596f4b95a10a0
                    dependencies:
                    - name: cache
                      status: ok
                      time_taken: 2.032
                    - name: db
                      status: ok
                      time_taken: 233.538
                    - name: model-server
                      status: ok
                      time_taken: 0.001
                  summary: Example output
          description: ''
        '500':
          description: One or more backend services are unavailable.
components:
  schemas:
    ActionEnum:
      enum:
      - '0'
      - '1'
      type: string
    AnsibleContentFeedback:
      type: object
      properties:
        content:
          type: string
          title: Ansible Content
          description: Ansible file content.
        documentUri:
          type: string
        trigger:
          $ref: '#/components/schemas/TriggerEnum'
        activityId:
          type: string
          format: uuid
          title: Activity ID
          description: A UUID that identifies a user activity session to the document
            uploaded.
      required:
      - content
      - documentUri
      - trigger
    CompletionRequest:
      type: object
      properties:
        prompt:
          type: string
          description: Editor prompt.
        suggestionId:
          type: string
          format: uuid
          title: Suggestion ID
          description: A UUID that identifies a suggestion.
        metadata:
          $ref: '#/components/schemas/Metadata'
      required:
      - prompt
    CompletionResponse:
      type: object
      properties:
        predictions:
          type: array
          items:
            type: string
      required:
      - predictions
    FeedbackRequest:
      type: object
      properties:
        inlineSuggestion:
          $ref: '#/components/schemas/InlineSuggestionFeedback'
        ansibleContent:
          $ref: '#/components/schemas/AnsibleContentFeedback'
    InlineSuggestionFeedback:
      type: object
      properties:
        latency:
          type: number
          format: double
        userActionTime:
          type: number
          format: double
        documentUri:
          type: string
        action:
          $ref: '#/components/schemas/ActionEnum'
        error:
          type: string
        suggestionId:
          type: string
          format: uuid
          title: Suggestion ID
          description: A UUID that identifies a suggestion.
        activityId:
          type: string
          format: uuid
          title: Activity ID
          description: A UUID that identifies a user activity session to the document
            uploaded.
      required:
      - action
      - suggestionId
    Metadata:
      type: object
      properties:
        documentUri:
          type: string
        activityId:
          type: string
          format: uuid
          title: Activity ID
          description: A UUID that identifies a user activity session within a given
            document.
    TriggerEnum:
      enum:
      - '0'
      - '1'
      - '2'
      type: string
    User:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
      - username
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    oauth2:
      type: oauth2
      flows: {}
tags:
- name: ai
  description: AI-related operations
- name: me
  description: Authenticated user information
- name: check
  description: Health check
